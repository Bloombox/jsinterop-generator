/*
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 *
 */

const generator =
    require('jsinterop_generator_module/TypescriptJsInteropGenerator.js');
const flags = require("commander");

flags.option('--output <file>', 'Output file path')
    .option('--package_prefix <str>', 'Java package prefix')
    .option(
        '--global_scope_class_name <str>',
        'Name of the java class representing the global scope')
    .option('--debug', 'Enable debug mode')
    .option('--with_typescript_lib', 'Generate types from lib.d.ts')
    .option(
        '--bean_convention',
        'Use java bean convention for generated getters and setters')
    .option(
        '--dependency_mapping_file <file>',
        'File generated by the generator that contains the mapping between ' +
            'native fqn and java fqn of types provided by a dependency',
        __collect, [])
    .option(
        '--integer_entities_file <file>',
        'File containing the list of entities typed as number and need to be ' +
            'converted to integer instead of double. The entity is ' +
            'represented by its fqn.',
        __collect, [])
    .option(
        '--wildcard_types_file <file>',
        'File containing a list of key/value where the key is the fully ' +
            'qualify name of the type parameter and the value is the kind of ' +
            'wildcard type to use. Possible value: SUPER and EXTENDS',
        __collect, [])
    .option('--output_dependency_file <file>', 'Output dependency file path')
    .parse(process.argv);

// generator config
const config = {
  'output': flags.output,
  'packagePrefix': flags.package_prefix,
  'globalScopeClassName': flags.global_scope_class_name,
  'debugEnabled': flags.debug,
  'withTypescriptLib': flags.with_typescript_lib,
  'useBeanConvention': flags.bean_convention,
  'depsTypesMapping': flags.dependency_mapping_file,
  'integerEntities': flags.integer_entities_file,
  'outputDependencyFile': flags.output_dependency_file,
  'wildcardTypesFiles': flags.wildcard_types_file,
};

// arrays containing paths to d.ts files.
const dts_files = flags.args;

generator.runGenerator(dts_files, config);

/**
 * Use by commander to collect repeatable option.
 * array.
 * @param {string} val
 * @param {Array<string>} option
 * @return {Array<string>}
 */
function __collect(val, option) {
  option.push(val);
  return option;
}

